{
  "[html]": {
    "editor.formatOnSave": false
  },
  "[django-html]": {
    "editor.formatOnSave": false
  },
  "editor.formatOnSave": true,
  "emeraldwalk.runonsave": {
    "commands": [
      {
        "match": "\\.py$",
        "cmd": "uv run python \"${workspaceFolder}/tools/add_docstring.py\" \"${file}\" && uv run ruff \"${file}\" --fix --unsafe-fixes && uv run isort \"${file}\" && uv run autopep8 --in-place --aggressive --aggressive \"${file}\"",
        "ignore": [
          "node_modules/**"
        ]
      },
      {
        "match": "\\.(html|djhtml|django-html)$",
        "cmd": "uv run djlint \"${file}\" --reformat --ignore H030 --configuration .config/djlintrc",
        "ignore": [
          "node_modules/**"
        ]
      },
      {
        "match": "\\.(md|markdown)$",
        "cmd": "prettier --write \"${file}\" --config .config/prettierrc.json && markdownlint-cli2-fix \"${file}\" --config .config/.markdownlint-cli2.jsonc",
        "ignore": [
          "node_modules/**"
        ]
      }
    ]
  },
  "djlint.enableLinting": false,
  "[python]": {
    "editor.defaultFormatter": "ms-python.black-formatter",
    "editor.formatOnSave": true,
    "editor.codeActionsOnSave": {
      "source.organizeImports": "explicit",
      "source.fixAll": "explicit",
      "source.fixAll.ruff": "explicit"
    }
  },
  "pylint.enabled": true,
  "pylint.args": [
    "--rcfile=.pylintrc"
  ],
  "python.linting.ignorePatterns": [
    "tools/add_docstring.py"
  ],
  "black-formatter.args": [
    "--line-length=120"
  ],
  "isort.args": [
    "--profile=django",
    "--line-length=120"
  ],
  "[markdown]": {
    "editor.defaultFormatter": "vscode.markdown-language-features",
    "editor.formatOnSave": true
  },
  "markdownlint.config": {
    "MD013": false,
    "MD040": false,
    "MD036": false,
    "MD051": false,
    "MD012": false,
    "MD003": {
      "style": "consistent"
    },
    "MD049": {
      "style": "consistent"
    },
    "MD050": {
      "style": "consistent"
    },
    "MD026": false
  },
  "makefile.configureOnOpen": false,
  "ruff.enable": true,
  "ruff.organizeImports": true,
  "ruff.path": [
    "ruff"
  ],
  "ruff.ignorePatterns": [
    "src/home/settings.py",
    "src/home/settings/*.py"
  ],
  "sonarlint.pathToCompileCommands": "${workspaceFolder}",
  "sonarlint.connectedMode.project": {
    "projectKey": "massimilianoporzio_deploy-django",
    "connectionId": "SonarCloud"
  },
  "sonarlint.rules": {
    "python:S1128": {
      "level": "off"
    },
    "python:S112": {
      "level": "off"
    },
    "python:S3776": {
      "level": "off"
    },
    "python:S1542": {
      "level": "off"
    }
  },
  "sonarlint.disableTelemetry": true,
  "github-actions.workflows.pinned.workflows": [
    ".github/workflows/codacy-analysis.yml"
  ],
  "yaml.validate": true,
  "yaml.format.enable": true,
  "postman.settings.dotenv-detection-notification-visibility": false,
  "search.exclude": {
    "**/node_modules": true,
    "**/dist": true,
    "**/build": true,
    "**/out": true,
    "**/.npm": true,
    "**/.yarn": true,
    "**/.pnpm": true
  },
  "files.exclude": {
    "**/node_modules": true,
    "**/.npm": true,
    "**/.yarn": true,
    "**/.pnpm": true
  },
  "files.watcherExclude": {
    "**/node_modules/**": true,
    "**/dist/**": true,
    "**/build/**": true,
    "**/out/**": true
  },
  "python.testing.unittestEnabled": false,
  "python.testing.pytestEnabled": true,
  "python.testing.pytestArgs": [
    "src",
    "-v",
    "--reuse-db",
    "--nomigrations"
  ],
  "python.testing.nosetestsEnabled": false,
  "python.testing.autoTestDiscoverOnSaveEnabled": true,
  "python.testing.cwd": "${workspaceFolder}",
  "python.defaultInterpreterPath": "${workspaceFolder}/.venv/Scripts/python.exe",
  "github.copilot.enable": {
    "*": true,
    "yaml": false,
    "plaintext": false
  },
  "github.copilot.editor.enableAutoCompletions": false,
  "editor.inlineSuggest.enabled": false,
  "editor.quickSuggestions": {
    "other": false,
    "comments": false,
    "strings": false
  },
  "editor.suggestOnTriggerCharacters": false,
  "editor.wordBasedSuggestions": "off"
}
